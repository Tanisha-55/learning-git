@Service
public class ResourceService {
    @Autowired
    private ResourceRelationRepository relationRepository;

    public Node getResourceHierarchy(Long resourceId) {
        // Fetch root details
        Node root = buildRootNode(resourceId); // Assume this method exists
        Set<Long> visited = new HashSet<>();

        // Build upstream and downstream iteratively or recursively with shared visited
        root.setUpstream(buildUpstreamIterative(resourceId, visited));
        visited.clear(); // Reset for downstream
        root.setDownstream(buildDownstreamIterative(resourceId, visited));
        return root;
    }

    // Iterative approach for upstream (prevents deep recursion)
    private List<Node> buildUpstreamIterative(Long resourceId, Set<Long> visited) {
        List<Node> nodes = new ArrayList<>();
        Stack<Long> stack = new Stack<>();
        stack.push(resourceId);

        while (!stack.isEmpty()) {
            Long currentId = stack.pop();
            if (visited.contains(currentId)) continue;
            visited.add(currentId);

            List<ResourceRelation> relations = relationRepository.findByTgtRsrcKy(currentId);
            for (ResourceRelation rel : relations) {
                Node node = new Node(rel.getSrcResourceNm(), rel.getSrcRsrcKy(), rel.getLvl());
                nodes.add(node);
                stack.push(rel.getSrcRsrcKy()); // Process next level
            }
        }
        return nodes;
    }

    // Similar method for downstream
    private List<Node> buildDownstreamIterative(Long resourceId, Set<Long> visited) {
        List<Node> nodes = new ArrayList<>();
        Queue<Long> queue = new LinkedList<>();
        queue.add(resourceId);

        while (!queue.isEmpty()) {
            Long currentId = queue.poll();
            if (visited.contains(currentId)) continue;
            visited.add(currentId);

            List<ResourceRelation> relations = relationRepository.findBySrcRsrcKy(currentId);
            for (ResourceRelation rel : relations) {
                Node node = new Node(rel.getTgtResourceNm(), rel.getTgtRsrcKy(), rel.getLvl());
                nodes.add(node);
                queue.add(rel.getTgtRsrcKy()); // Process next level
            }
        }
        return nodes;
    }
}
