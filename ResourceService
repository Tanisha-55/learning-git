@Service
public class ResourceService {
    private final ResourceRepository resourceRepo;

    public ResourceService(ResourceRepository resourceRepo) {
        this.resourceRepo = resourceRepo;
    }

    public Node getResourceHierarchy(Long resourceId) {
        String rootName = resourceRepo.findRootName(resourceId);
        Node root = new Node(rootName, resourceId, 0, true); // Root is upstream by default
        root.setUpstream(buildUpstream(resourceId));
        root.setDownstream(buildDownstream(resourceId));
        return root;
    }

    // Build upstream hierarchy (direction = upstream)
    private List<Node> buildUpstream(Long resourceId) {
        List<Node> upstreamNodes = new ArrayList<>();
        Stack<Long> stack = new Stack<>();
        Set<Long> visited = new HashSet<>();
        stack.push(resourceId);

        while (!stack.isEmpty()) {
            Long currentId = stack.pop();
            if (visited.contains(currentId)) continue;
            visited.add(currentId);

            List<Node> currentUpstreams = resourceRepo.findUpstreamByResourceId(currentId);
            for (Node node : currentUpstreams) {
                if (!visited.contains(node.getId())) {
                    stack.push(node.getId());
                    node.setUpstream(buildUpstream(node.getId())); // Recursively build upstream
                    upstreamNodes.add(node);
                }
            }
        }
        return upstreamNodes;
    }

    // Build downstream hierarchy (direction = downstream)
    private List<Node> buildDownstream(Long resourceId) {
        List<Node> downstreamNodes = new ArrayList<>();
        Queue<Long> queue = new LinkedList<>();
        Set<Long> visited = new HashSet<>();
        queue.add(resourceId);

        while (!queue.isEmpty()) {
            Long currentId = queue.poll();
            if (visited.contains(currentId)) continue;
            visited.add(currentId);

            List<Node> currentDownstreams = resourceRepo.findDownstreamByResourceId(currentId);
            for (Node node : currentDownstreams) {
                if (!visited.contains(node.getId())) {
                    queue.add(node.getId());
                    node.setDownstream(buildDownstream(node.getId())); // Recursively build downstream
                    downstreamNodes.add(node);
                }
            }
        }
        return downstreamNodes;
    }
}
