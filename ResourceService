@Service
public class ResourceService {
    @Autowired
    private ResourceRelationRepository relationRepository;

    public Node getResourceHierarchy(Long resourceId) {
        // Fetch root details (assuming resourceId exists)
        Node root = new Node();
        root.setId(resourceId);
        root.setLvl(0); // Root level is 0

        // Fetch immediate relations to get root name
        List<ResourceRelation> upstream = relationRepository.findByTgtRsrcKy(resourceId);
        List<ResourceRelation> downstream = relationRepository.findBySrcRsrcKy(resourceId);
        if (!upstream.isEmpty()) {
            root.setName(upstream.get(0).getTgtResourceNm());
        } else if (!downstream.isEmpty()) {
            root.setName(downstream.get(0).getSrcResourceNm());
        } else {
            throw new RuntimeException("Resource not found");
        }

        // Build upstream/downstream with cycle prevention
        root.setUpstream(buildUpstream(resourceId, new HashSet<>()));
        root.setDownstream(buildDownstream(resourceId, new HashSet<>()));
        return root;
    }

    private List<Node> buildUpstream(Long resourceId, Set<Long> visited) {
        if (visited.contains(resourceId)) return Collections.emptyList();
        visited.add(resourceId);

        List<ResourceRelation> relations = relationRepository.findByTgtRsrcKy(resourceId);
        List<Node> nodes = new ArrayList<>();

        for (ResourceRelation rel : relations) {
            Node node = new Node();
            node.setName(rel.getSrcResourceNm());
            node.setId(rel.getSrcRsrcKy());
            node.setLvl(rel.getLvl());
            node.setUpstream(buildUpstream(rel.getSrcRsrcKy(), new HashSet<>(visited)));
            nodes.add(node);
        }
        return nodes;
    }

    private List<Node> buildDownstream(Long resourceId, Set<Long> visited) {
        if (visited.contains(resourceId)) return Collections.emptyList();
        visited.add(resourceId);

        List<ResourceRelation> relations = relationRepository.findBySrcRsrcKy(resourceId);
        List<Node> nodes = new ArrayList<>();

        for (ResourceRelation rel : relations) {
            Node node = new Node();
            node.setName(rel.getTgtResourceNm());
            node.setId(rel.getTgtRsrcKy());
            node.setLvl(rel.getLvl());
            node.setDownstream(buildDownstream(rel.getTgtRsrcKy(), new HashSet<>(visited)));
            nodes.add(node);
        }
        return nodes;
    }
}
