const config = {
  Job: [
    { label: "Process name", value: selectedCellData?.processName, link: /job/${jobKey} },
    { label: "Process type", value: selectedCellData?.processType },
    { label: "Long Description", value: selectedCellData?.longDescTx },
    { label: "Box Name", value: selectedCellData?.boxName },
    { label: "Tech Code", value: selectedCellData?.techCode }
  ],
  "Data Platform": [
    { label: "Data Platform", value: selectedCellData?.dbName, link: /platform/${jobKey} },
    { label: "Data Platform Asset Name", value: selectedCellData?.name },
    { label: "GRN", value: selectedCellData?.grn },
    { label: "IT System Owner", value: selectedCellData?.itsowner },
    { label: "Data Platform Short Name", value: selectedCellData?.shortName }
  ],
  Resource: [
    { label: "Resource Name", value: selectedCellData?.tableName, link: /table/${selectedCellData?.id} },
    { label: "Schema Name", value: selectedCellData?.schemaName },
    { label: "Database Name", value: selectedCellData?.databaseName },
    { label: "GRN", value: selectedCellData?.grn },
    {
      label: "Tags",
      value: selectedCellData?.tag_tx?.split(',').map((tag, index) => (
        <Chip key={index} label={tag.trim()} size="small" style={{ marginRight: 4, marginBottom: 4 }} />
      ))
    }
  ]
};

// Render dynamically based on selectedType
const renderFields = config[selectedType] || [];

return (
  <div>
    {renderFields.map(({ label, value, link }, index) => (
      <p key={index} className="card-text">
        <strong>{label}: </strong>
        {link ? <Link to={link}>{value}</Link> : value}
      </p>
    ))}
  </div>
);
