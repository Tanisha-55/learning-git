import React, { useState, useRef } from 'react';
import { 
  Stepper, 
  Step, 
  StepLabel, 
  Button, 
  TextField, 
  Typography, 
  Box, 
  Grid,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Paper,
  IconButton,
  InputAdornment,
  Collapse,
  Chip,
  Divider,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  CircularProgress
} from '@mui/material';
import { 
  ArrowBack as ArrowBackIcon, 
  CloudUpload as CloudUploadIcon,
  CheckCircle as CheckCircleIcon,
  AddCircle as AddCircleIcon,
  Storage as DatabaseIcon,
  Storage as StorageIcon,
  Info as InfoIcon,
  Close as CloseIcon,
  ArrowDropDown as ArrowDropDownIcon,
  InsertDriveFile as FileIcon,
  Delete as DeleteIcon
} from '@mui/icons-material';

// Dummy data
const dummyData = {
  assets: [
    { id: 1, name: 'Customer Data', description: 'Customer information and profiles', databases: [
      { id: 'db1', name: 'DATA_PLTFML_KY', description: 'Platform key database' },
      { id: 'db2', name: 'CRM_DB_01', description: 'Customer relationship management' }
    ]},
    { id: 2, name: 'Sales Records', description: 'Historical sales transactions', databases: [
      { id: 'db3', name: 'SALES_DB_02', description: 'Sales transactions database' },
      { id: 'db4', name: 'ANALYTICS_DB', description: 'Sales analytics repository' }
    ]},
    { id: 3, name: 'Inventory System', description: 'Product inventory and stock levels', databases: [
      { id: 'db5', name: 'INVENTORY_DB_MAIN', description: 'Primary inventory database' }
    ]},
    { id: 4, name: 'HR Database', description: 'Employee records and HR information', databases: [
      { id: 'db6', name: 'HR_PLATFORM_DB', description: 'Human resources platform' }
    ]}
  ],
  databaseMappings: {
    'DATA_PLTFML_KY': 'PLTFM_KEY_001',
    'CRM_DB_01': 'CRM_KEY_002',
    'SALES_DB_02': 'SALES_KEY_003',
    'ANALYTICS_DB': 'ANALYTICS_KEY_004',
    'INVENTORY_DB_MAIN': 'INVENTORY_KEY_005',
    'HR_PLATFORM_DB': 'HR_KEY_006'
  },
  defaultQuery: "SELECT resource_id, element_name, data_type, description FROM data_elements WHERE db_key = '{{DB_KEY}}'"
};

const MetadataCollectionStepper = () => {
  const [activeStep, setActiveStep] = useState(0);
  const [formData, setFormData] = useState({
    asset: null,
    database: null,
    resourceDataElementFile: null,
    processFile: null,
    processResourceFile: null,
    createdAsset: '',
    createdDatabase: '',
    newAssetDescription: ''
  });
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [submitted, setSubmitted] = useState(false);
  const [assets, setAssets] = useState([...dummyData.assets]);
  const [showInfo, setShowInfo] = useState(false);
  const [fileUploadModalOpen, setFileUploadModalOpen] = useState(false);
  const [uploadedFiles, setUploadedFiles] = useState([]);
  const [isDragging, setIsDragging] = useState(false);
  const [uploading, setUploading] = useState(false);
  const [uploadSuccess, setUploadSuccess] = useState(false);
  const fileInputRef = useRef(null);
  const [currentUploadField, setCurrentUploadField] = useState('');
  
  // Create workflow steps
  const steps = [
    'Asset & Database',
    'Resource & Data Element',
    'Process Definition',
    'Process Resource'
  ];

  const handleNext = () => {
    if (activeStep === steps.length - 1) {
      setSubmitted(true);
    } else {
      setActiveStep((prevStep) => prevStep + 1);
    }
  };

  const handleBack = () => {
    setActiveStep((prevStep) => prevStep - 1);
  };

  const handleAssetChange = (event) => {
    const assetId = event.target.value;
    if (assetId === 'create-new') {
      setShowCreateModal(true);
      return;
    }
    
    const selectedAsset = assets.find(a => a.id === assetId);
    setFormData({
      ...formData,
      asset: selectedAsset,
      database: null
    });
  };

  const handleDatabaseChange = (event) => {
    const dbId = event.target.value;
    if (!formData.asset) return;
    
    const selectedDb = formData.asset.databases.find(db => db.id === dbId);
    setFormData({ ...formData, database: selectedDb });
  };

  const handleCreateAsset = () => {
    if (formData.createdAsset && formData.createdDatabase) {
      const newAsset = {
        id: assets.length + 1,
        name: formData.createdAsset,
        description: formData.newAssetDescription || 'Newly created asset',
        databases: [{
          id: `db${assets.length + 1}`,
          name: formData.createdDatabase,
          description: 'Newly created database'
        }]
      };
      
      setAssets([...assets, newAsset]);
      setFormData({
        ...formData,
        asset: newAsset,
        database: newAsset.databases[0],
        createdAsset: '',
        createdDatabase: '',
        newAssetDescription: ''
      });
      setShowCreateModal(false);
    }
  };

  const handleFileUpload = (field) => (event) => {
    setFormData({ ...formData, [field]: event.target.files[0] });
  };

  const resetForm = () => {
    setFormData({
      asset: null,
      database: null,
      resourceDataElementFile: null,
      processFile: null,
      processResourceFile: null,
      createdAsset: '',
      createdDatabase: '',
      newAssetDescription: ''
    });
    setActiveStep(0);
    setSubmitted(false);
  };

  const isNextDisabled = () => {
    switch (activeStep) {
      case 0:
        return !formData.asset || !formData.database;
      case 1:
        return !formData.resourceDataElementFile;
      case 2:
        return !formData.processFile;
      case 3:
        return !formData.processResourceFile;
      default:
        return true;
    }
  };

  // Enhanced file upload handling
  const openFileUploadModal = (field) => {
    setCurrentUploadField(field);
    setFileUploadModalOpen(true);
    setUploadedFiles([]);
    setUploadSuccess(false);
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragEnter = (e) => {
    e.preventDefault();
    setIsDragging(true);
  };

  const handleDragLeave = (e) => {
    e.preventDefault();
    setIsDragging(false);
  };

  const handleDrop = (e) => {
    e.preventDefault();
    setIsDragging(false);
    
    const files = Array.from(e.dataTransfer.files);
    if (files.length > 0) {
      handleFiles(files);
    }
  };

  const handleFileInput = (e) => {
    const files = Array.from(e.target.files);
    if (files.length > 0) {
      handleFiles(files);
    }
  };

  const handleFiles = (files) => {
    const validFiles = files.filter(file => {
      const ext = file.name.split('.').pop().toLowerCase();
      return ['csv', 'xlsx', 'xls'].includes(ext);
    });
    
    if (validFiles.length > 0) {
      setUploadedFiles(validFiles);
    }
  };

  const removeFile = (index) => {
    const newFiles = [...uploadedFiles];
    newFiles.splice(index, 1);
    setUploadedFiles(newFiles);
  };

  const handleUpload = () => {
    if (uploadedFiles.length === 0) return;
    
    setUploading(true);
    
    // Simulate file upload
    setTimeout(() => {
      setUploading(false);
      setUploadSuccess(true);
      
      // Update form data with the first file
      setFormData({
        ...formData,
        [currentUploadField]: uploadedFiles[0]
      });
      
      // Auto-close after success
      setTimeout(() => {
        setFileUploadModalOpen(false);
      }, 1500);
    }, 2000);
  };

  const renderStepContent = (step) => {
    switch (step) {
      case 0:
        return (
          <Box sx={{ mt: 3, maxWidth: 800, mx: 'auto' }}>
            <Paper elevation={0} sx={{ p: 3, mb: 3, backgroundColor: '#f8fbff', border: '1px solid #e0f0ff' }}>
              <Box display="flex" alignItems="center" mb={2}>
                <InfoIcon color="primary" sx={{ mr: 1 }} />
                <Typography variant="h6" color="primary" fontWeight="bold">
                  Asset & Database Selection
                </Typography>
              </Box>
              <Typography variant="body2" sx={{ mb: 1 }}>
                Select an asset and its corresponding database from the dropdowns below.
              </Typography>
              <Typography variant="body2">
                If you don't see your asset, you can create a new one using the button below.
              </Typography>
            </Paper>
            
            <Grid container spacing={3} sx={{ mb: 3 }}>
              <Grid item xs={12} md={6} sx={{ minWidth: '50%' }}>
                <FormControl fullWidth variant="outlined" sx={{ mb: 3 }}>
                  <InputLabel id="asset-select-label">Select Asset</InputLabel>
                  <Select
                    labelId="asset-select-label"
                    value={formData.asset?.id || ''}
                    onChange={handleAssetChange}
                    label="Select Asset"
                    IconComponent={ArrowDropDownIcon}
                    MenuProps={{
                      PaperProps: {
                        style: {
                          maxHeight: 300,
                        },
                      },
                    }}
                  >
                    {assets.map((asset) => (
                      <MenuItem key={asset.id} value={asset.id}>
                        <Box>
                          <Typography fontWeight={formData.asset?.id === asset.id ? 'bold' : 'normal'}>
                            {asset.name}
                          </Typography>
                        </Box>
                      </MenuItem>
                    ))}
                    <Divider sx={{ my: 1 }} />
                    <MenuItem value="create-new">
                      <Box display="flex" alignItems="center" color="primary.main">
                        <AddCircleIcon sx={{ mr: 1 }} />
                        <Typography fontWeight="bold">Create New Asset</Typography>
                      </Box>
                    </MenuItem>
                  </Select>
                </FormControl>

                {formData.asset && (
                  <FormControl fullWidth variant="outlined">
                    <InputLabel id="database-select-label">Select Database</InputLabel>
                    <Select
                      labelId="database-select-label"
                      value={formData.database?.id || ''}
                      onChange={handleDatabaseChange}
                      label="Select Database"
                      IconComponent={ArrowDropDownIcon}
                      MenuProps={{
                        PaperProps: {
                          style: {
                            maxHeight: 300,
                          },
                        },
                      }}
                    >
                      {formData.asset.databases.map((db) => (
                        <MenuItem key={db.id} value={db.id}>
                          <Box>
                            <Typography fontWeight={formData.database?.id === db.id ? 'bold' : 'normal'}>
                              {db.name}
                            </Typography>
                          </Box>
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                )}

                <Box sx={{ mt: 2, display: 'flex', gap: 2, textAlign: 'center' }}>
                  <Button
                    variant="outlined"
                    onClick={() => setShowCreateModal(true)}
                    startIcon={<AddCircleIcon />}
                    sx={{ mt: 2 }}
                  >
                    Create New Asset
                  </Button>
                  <Button
                    variant="outlined"
                    onClick={() => setFormData({ ...formData, asset: null, database: null })}
                    startIcon={<CloseIcon />}
                    sx={{ mt: 2 }}
                  >
                    Clear Selection
                  </Button>
                </Box>
              </Grid>

              {formData.asset && formData.database && (
                <Grid item xs={12} md={6} sx={{ minWidth: '45%' }}>
                  <Paper elevation={0} sx={{ p: 3, borderLeft: '4px solid #1976d2', height: '100%' }}>
                    <Typography variant="h6" fontWeight="bold" sx={{ mb: 2, display: 'flex', alignItems: 'center' }}>
                      <StorageIcon sx={{ mr: 1, color: '#1976d2' }} />
                      Selected Asset
                    </Typography>

                    <Box sx={{ mb: 2, p: 2, backgroundColor: '#f0f7ff', borderRadius: 1 }}>
                      <Typography fontWeight="bold">{formData.asset.name}</Typography>
                    </Box>

                    <Typography variant="h6" fontWeight="bold" sx={{ mb: 2, mt: 3, display: 'flex', alignItems: 'center' }}>
                      <DatabaseIcon sx={{ mr: 1, color: '#1976d2' }} />
                      Selected Database
                    </Typography>

                    <Box sx={{ p: 2, backgroundColor: '#f0f7ff', borderRadius: 1 }}>
                      <Typography fontWeight="bold">{formData.database.name}</Typography>
                    </Box>

                    <Chip
                      label="Ready to proceed"
                      color="success"
                      size="small"
                      icon={<CheckCircleIcon fontSize="small" />}
                      sx={{ mt: 3, alignSelf: 'flex-start' }}
                    />
                  </Paper>
                </Grid>
              )}
            </Grid>
          </Box>
        );
      case 1:
        return (
          <Box sx={{ mt: 3, maxWidth: 800, mx: 'auto' }}>
            <Grid container spacing={3}>
              <Grid item xs={12}>
                <Typography variant="h6" sx={{ mb: 1, fontWeight: 'bold' }}>
                  Database Selected: {formData.database?.name || 'None selected'}
                </Typography>
              </Grid>
              
              <Grid item xs={12}>
                <Typography variant="h6" sx={{ mb: 1 }}>
                  Download Query
                </Typography>
                <TextField
                  fullWidth
                  multiline
                  rows={4}
                  value={dummyData.defaultQuery.replace(
                    '{{DB_KEY}}', 
                    formData.database ? 
                      (dummyData.databaseMappings[formData.database.name] || 'YOUR_DB_KEY') : 
                      'YOUR_DB_KEY'
                  )}
                  variant="outlined"
                  InputProps={{ readOnly: true }}
                  sx={{ mb: 2, backgroundColor: '#f5f5f5' }}
                />
                <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                  Copy this query and execute it in your database to extract data. Save the results as a CSV or Excel file.
                </Typography>
              </Grid>
              
              <Grid item xs={12}>
                <Typography variant="h6" sx={{ mb: 1 }}>
                  Upload Data File
                </Typography>
                <Paper variant="outlined" sx={{ p: 2, mb: 2, backgroundColor: '#fafafa' }}>
                  <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 'bold' }}>
                    File Guidelines:
                  </Typography>
                  <Typography variant="body2" color="textSecondary" component="div">
                    <ul>
                      <li>File format: CSV or Excel (.xlsx)</li>
                      <li>Max file size: 10MB</li>
                      <li>Required columns: resource_id, element_name, data_type, description</li>
                      <li>Date formats: YYYY-MM-DD</li>
                      <li>First row should contain headers</li>
                      <li>No special characters in column names</li>
                    </ul>
                  </Typography>
                </Paper>
                
                <Button 
                  variant="contained" 
                  startIcon={<CloudUploadIcon />}
                  sx={{ mr: 2 }}
                  onClick={() => openFileUploadModal('resourceDataElementFile')}
                >
                  Upload File
                </Button>
                
                {formData.resourceDataElementFile && (
                  <Typography variant="body2" sx={{ display: 'inline-flex', alignItems: 'center' }}>
                    <CheckCircleIcon color="success" sx={{ mr: 1 }} />
                    {formData.resourceDataElementFile.name}
                  </Typography>
                )}
              </Grid>
            </Grid>
          </Box>
        );
      case 2:
        return (
          <Box sx={{ mt: 3, maxWidth: 800, mx: 'auto' }}>
            <Grid container spacing={3}>
              <Grid item xs={12}>
                <Typography variant="h6" sx={{ mb: 2 }}>
                  Upload Process Definition File
                </Typography>
                <Paper variant="outlined" sx={{ p: 2, mb: 2, backgroundColor: '#fafafa' }}>
                  <Typography variant="body2" color="textSecondary">
                    Upload a CSV or Excel file containing process definitions. Ensure the file includes the following columns: 
                    process_id, process_name, description, owner, and status.
                  </Typography>
                </Paper>
                
                <Button 
                  variant="contained" 
                  startIcon={<CloudUploadIcon />}
                  sx={{ mr: 2 }}
                  onClick={() => openFileUploadModal('processFile')}
                >
                  Upload File
                </Button>
                
                {formData.processFile && (
                  <Typography variant="body2" sx={{ display: 'inline-flex', alignItems: 'center' }}>
                    <CheckCircleIcon color="success" sx={{ mr: 1 }} />
                    {formData.processFile.name}
                  </Typography>
                )}
              </Grid>
            </Grid>
          </Box>
        );
      case 3:
        return (
          <Box sx={{ mt: 3, maxWidth: 800, mx: 'auto' }}>
            <Grid container spacing={3}>
              <Grid item xs={12}>
                <Typography variant="h6" sx={{ mb: 2 }}>
                  Upload Process Resource File
                </Typography>
                <Paper variant="outlined" sx={{ p: 2, mb: 2, backgroundColor: '#fafafa' }}>
                  <Typography variant="body2" color="textSecondary">
                    Upload a CSV or Excel file containing process resources. Ensure the file includes the following columns: 
                    resource_id, process_id, role, and allocation.
                  </Typography>
                </Paper>
                
                <Button 
                  variant="contained" 
                  startIcon={<CloudUploadIcon />}
                  sx={{ mr: 2 }}
                  onClick={() => openFileUploadModal('processResourceFile')}
                >
                  Upload File
                </Button>
                
                {formData.processResourceFile && (
                  <Typography variant="body2" sx={{ display: 'inline-flex', alignItems: 'center' }}>
                    <CheckCircleIcon color="success" sx={{ mr: 1 }} />
                    {formData.processResourceFile.name}
                  </Typography>
                )}
              </Grid>
            </Grid>
          </Box>
        );
      default:
        return null;
    }
  };

  return (
    <Box sx={{ 
      width: '100%', 
      backgroundColor: 'white', 
      p: 4, 
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #f5f7fa 0%, #e4e7f1 100%)'
    }}>
      <Box sx={{ maxWidth: 1200, mx: 'auto' }}>
        <Box 
          sx={{ 
            display: 'flex', 
            justifyContent: 'center', 
            alignItems: 'center', 
            mb: 4 
          }}
        >
          <Typography 
            variant="h4" 
            sx={{ 
              fontWeight: 'bold', 
              color: '#2c3e50', 
              textAlign: 'center' 
            }}
          >
            Metadata Collection
          </Typography>
        </Box>
        
        <Box sx={{ maxWidth: 1000, mx: 'auto', mb: 4 }}>
          <Stepper activeStep={activeStep} alternativeLabel>
            {steps.map((label) => (
              <Step key={label}>
                <StepLabel>{label}</StepLabel>
              </Step>
            ))}
          </Stepper>
        </Box>
      
        {submitted ? (
          <Box sx={{ 
            maxWidth: 600, 
            mx: 'auto', 
            p: 4, 
            textAlign: 'center',
            backgroundColor: 'white',
            borderRadius: 2,
            boxShadow: 3
          }}>
            <CheckCircleIcon sx={{ fontSize: 80, color: '#4caf50', mb: 2 }} />
            <Typography variant="h5" sx={{ mb: 2, fontWeight: 'bold' }}>
              Metadata Collection Submitted Successfully!
            </Typography>
            <Typography variant="body1" sx={{ mb: 3 }}>
              Your metadata has been successfully collected. You can view the status in the dashboard.
            </Typography>
            <Button 
              variant="contained" 
              onClick={resetForm}
              sx={{ mt: 2, px: 4 }}
            >
              Start New Collection
            </Button>
          </Box>
        ) : (
          <Box>
            {renderStepContent(activeStep)}
            
            <Box sx={{ 
              display: 'flex', 
              justifyContent: 'space-between', 
              mt: 4,
              pt: 2,
              borderTop: '1px solid #e0e0e0'
            }}>
              <Box>
                {activeStep !== 0 && (
                  <Button 
                    onClick={handleBack} 
                    startIcon={<ArrowBackIcon />}
                    sx={{ px: 4 }}
                  >
                    Back
                  </Button>
                )}
              </Box>
              
              <Button 
                variant="contained" 
                onClick={handleNext}
                disabled={isNextDisabled()}
                sx={{ px: 6 }}
              >
                {activeStep === steps.length - 1 ? 'Submit' : 'Next'}
              </Button>
            </Box>
          </Box>
        )}
      </Box>
      
      {/* Create Asset Modal */}
      <Dialog open={showCreateModal} onClose={() => setShowCreateModal(false)} maxWidth="sm" fullWidth>
        <DialogTitle sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', borderBottom: '1px solid #eee' }}>
          <Box display="flex" alignItems="center">
            <AddCircleIcon color="primary" sx={{ mr: 1 }} />
            Create New Asset & Database
          </Box>
          <IconButton onClick={() => setShowCreateModal(false)}>
            <CloseIcon />
          </IconButton>
        </DialogTitle>
        <DialogContent>
          <Box sx={{ p: 3 }}>
            <Grid container spacing={3}>
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  label="Asset Name"
                  value={formData.createdAsset}
                  onChange={(e) => setFormData({...formData, createdAsset: e.target.value})}
                  variant="outlined"
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <StorageIcon />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>
              
              <Grid item xs={12}>
                <TextField
                  fullWidth
                  label="Database Name"
                  value={formData.createdDatabase}
                  onChange={(e) => setFormData({...formData, createdDatabase: e.target.value})}
                  variant="outlined"
                  InputProps={{
                    startAdornment: (
                      <InputAdornment position="start">
                        <DatabaseIcon />
                      </InputAdornment>
                    ),
                  }}
                />
              </Grid>
              
              <Grid item xs={12}>
                <Button 
                  variant="outlined" 
                  startIcon={<InfoIcon />} 
                  onClick={() => setShowInfo(!showInfo)}
                  sx={{ mb: 2 }}
                >
                  Naming Guidelines
                </Button>
                <Collapse in={showInfo}>
                  <Paper elevation={0} sx={{ p: 2, backgroundColor: '#f0f7ff' }}>
                    <Typography variant="body2" fontWeight="bold" mb={1}>
                      Asset Naming Guidelines:
                    </Typography>
                    <Typography variant="body2" component="div">
                      <ul>
                        <li>Use descriptive names that reflect the asset's purpose</li>
                        <li>Use title case (e.g., "Customer Data")</li>
                        <li>Avoid special characters except underscores</li>
                        <li>Keep names under 50 characters</li>
                      </ul>
                    </Typography>
                    <Typography variant="body2" fontWeight="bold" mt={2} mb={1}>
                      Database Naming Guidelines:
                    </Typography>
                    <Typography variant="body2" component="div">
                      <ul>
                        <li>Use uppercase letters and underscores</li>
                        <li>Include environment prefix if applicable (e.g., "PROD_")</li>
                        <li>Keep names concise but meaningful</li>
                        <li>Limit names to 30 characters</li>
                      </ul>
                    </Typography>
                  </Paper>
                </Collapse>
              </Grid>
            </Grid>
          </Box>
        </DialogContent>
        <DialogActions sx={{ p: 3, borderTop: '1px solid #eee' }}>
          <Button 
            onClick={() => setShowCreateModal(false)} 
            variant="outlined"
            sx={{ mr: 2 }}
          >
            Cancel
          </Button>
          <Button 
            variant="contained" 
            onClick={handleCreateAsset}
            disabled={!formData.createdAsset || !formData.createdDatabase}
            sx={{ px: 4 }}
          >
            Create Asset
          </Button>
        </DialogActions>
      </Dialog>
      
      {/* File Upload Modal */}
      <Dialog 
        open={fileUploadModalOpen} 
        onClose={() => setFileUploadModalOpen(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle sx={{ borderBottom: '1px solid #eee', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Box display="flex" alignItems="center">
            <CloudUploadIcon sx={{ mr: 1 }} />
            Upload File
          </Box>
          <IconButton onClick={() => setFileUploadModalOpen(false)}>
            <CloseIcon />
          </IconButton>
        </DialogTitle>
        <DialogContent>
          <Box sx={{ p: 3 }}>
            <Box
              onDragOver={handleDragOver}
              onDragEnter={handleDragEnter}
              onDragLeave={handleDragLeave}
              onDrop={handleDrop}
              sx={{
                border: '2px dashed',
                borderColor: isDragging ? '#1976d2' : '#bdbdbd',
                borderRadius: 2,
                p: 4,
                textAlign: 'center',
                backgroundColor: isDragging ? '#f0f7ff' : '#fafafa',
                transition: 'all 0.3s ease',
                cursor: 'pointer',
                mb: 2
              }}
              onClick={() => fileInputRef.current.click()}
            >
              <CloudUploadIcon sx={{ fontSize: 48, color: '#1976d2', mb: 1 }} />
              <Typography variant="h6" sx={{ mb: 1 }}>
                Drag & Drop files here
              </Typography>
              <Typography variant="body2" color="textSecondary" sx={{ mb: 2 }}>
                or click to browse your files
              </Typography>
              <Typography variant="caption" color="textSecondary">
                Supported formats: CSV, XLSX (Max: 10MB)
              </Typography>
              
              <input
                type="file"
                ref={fileInputRef}
                style={{ display: 'none' }}
                onChange={handleFileInput}
                accept=".csv,.xlsx,.xls"
                multiple={false}
              />
            </Box>
            
            {uploadedFiles.length > 0 && (
              <Box sx={{ mt: 3 }}>
                <Typography variant="subtitle1" sx={{ mb: 2 }}>
                  Selected Files
                </Typography>
                <List dense>
                  {uploadedFiles.map((file, index) => (
                    <ListItem 
                      key={index} 
                      secondaryAction={
                        <IconButton edge="end" onClick={() => removeFile(index)}>
                          <DeleteIcon />
                        </IconButton>
                      }
                      sx={{ 
                        backgroundColor: '#f5f5f5', 
                        borderRadius: 1,
                        mb: 1 
                      }}
                    >
                      <ListItemIcon>
                        <FileIcon />
                      </ListItemIcon>
                      <ListItemText 
                        primary={file.name} 
                        secondary={`${(file.size / 1024).toFixed(2)} KB`} 
                      />
                    </ListItem>
                  ))}
                </List>
              </Box>
            )}
            
            <Paper variant="outlined" sx={{ p: 2, mt: 3, backgroundColor: '#fafafa' }}>
              <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 'bold' }}>
                File Guidelines:
              </Typography>
              <Typography variant="body2" color="textSecondary" component="div">
                <ul>
                  <li>File format: CSV or Excel (.xlsx)</li>
                  <li>Max file size: 10MB</li>
                  <li>First row should contain headers</li>
                  <li>No special characters in column names</li>
                </ul>
              </Typography>
            </Paper>
          </Box>
        </DialogContent>
        <DialogActions sx={{ p: 3, borderTop: '1px solid #eee' }}>
          <Button 
            onClick={() => setFileUploadModalOpen(false)} 
            variant="outlined"
            sx={{ mr: 2 }}
          >
            Cancel
          </Button>
          <Button 
            variant="contained" 
            onClick={handleUpload}
            disabled={uploadedFiles.length === 0 || uploading || uploadSuccess}
            startIcon={uploading ? <CircularProgress size={20} color="inherit" /> : null}
            sx={{ px: 4 }}
          >
            {uploading ? 'Uploading...' : uploadSuccess ? 'Uploaded!' : 'Upload File'}
          </Button>
        </DialogActions>
      </Dialog>
    </Box>
  );
};

export default MetadataCollectionStepper;
