import React, { useState } from 'react';
import { Grid, Box } from '@mui/material';
import HierarchicalFilter from './HierarchicalFilter';
import AdditionalFilter from './AdditionalFilter';
import SearchResults from './SearchResults';

const App = () => {
  // Sample API response data structure
  const apiResponse = {
    facetData: {
      "Table": {
        "count": 100,
        "assetNames": {
          "Cedar 2.0 Data Repository": {
            "count": 4,
            "dbNames": {
              "hypd_egrc_dw_cedar": {
                "count": 4,
                "rsrcNames": {
                  "resource1": { "count": 2 },
                  "resource2": { "count": 2 }
                }
              }
            }
          },
          "eGRC OpenPages Platform": {
            "count": 16,
            "dbNames": {
              "hypd_egrc7_new": {
                "count": 16,
                "rsrcNames": {}
              }
            }
          }
        }
      }
    },
    searchDaoList: [
      { id: 1, type: "Table", assetName: "Cedar 2.0 Data Repository", dbName: "hypd_egrc_dw_cedar", rsrcName: "resource1" },
      { id: 2, type: "Table", assetName: "Cedar 2.0 Data Repository", dbName: "hypd_egrc_dw_cedar", rsrcName: "resource2" },
      { id: 3, type: "Table", assetName: "eGRC OpenPages Platform", dbName: "hypd_egrc7_new", rsrcName: null },
      // ... more items can be added here
    ],
    ownerDept: {
      "IT Risk Management": 10,
      "IT Security": 5,
      "Compliance": 8,
      "Audit": 3
    }
  };

  const [filteredResults, setFilteredResults] = useState(apiResponse.searchDaoList);
  const [selectedFilters, setSelectedFilters] = useState({});

  const handleHierarchicalFilterChange = (selectedItems) => {
    // Convert selected tree items to filter criteria
    const filters = {};
    
    selectedItems.forEach(itemId => {
      const parts = itemId.split('|');
      if (parts.length === 1) {
        // Type level selected
        filters.type = parts[0];
      } else if (parts.length === 2) {
        // AssetName level selected
        filters.type = parts[0];
        filters.assetName = parts[1];
      } else if (parts.length === 3) {
        // DbName level selected
        filters.type = parts[0];
        filters.assetName = parts[1];
        filters.dbName = parts[2];
      } else if (parts.length === 4) {
        // RsrcName level selected
        filters.type = parts[0];
        filters.assetName = parts[1];
        filters.dbName = parts[2];
        filters.rsrcName = parts[3];
      }
    });

    setSelectedFilters(filters);
    
    // Apply filters to searchDaoList
    const filtered = apiResponse.searchDaoList.filter(item => {
      return Object.entries(filters).every(([key, value]) => {
        if (key === 'type') return item.type === value;
        if (key === 'assetName') return item.assetName === value;
        if (key === 'dbName') return item.dbName === value;
        if (key === 'rsrcName') return item.rsrcName === value;
        return true;
      });
    });

    setFilteredResults(filtered);
  };

  const handleAdditionalFilterChange = (selectedDepartments) => {
    // Implement department filtering if needed
    console.log("Selected departments:", selectedDepartments);
    // You can add department filtering logic here
  };

  return (
    <Box sx={{ 
      flexGrow: 1, 
      p: 3, 
      height: '100vh',
      backgroundColor: '#f5f5f5'
    }}>
      <Grid container spacing={3} sx={{ height: '100%' }}>
        {/* Left Column - Filters (20% width) */}
        <Grid item xs={2.4}>
          <Box sx={{ 
            display: 'flex', 
            flexDirection: 'column', 
            height: '100%', 
            gap: 3 
          }}>
            <HierarchicalFilter 
              facetData={apiResponse.facetData} 
              title="Common Filter"
              onSelectionChange={handleHierarchicalFilterChange}
            />
            <AdditionalFilter 
              data={apiResponse.ownerDept} 
              title="Owner Department"
              onSelectionChange={handleAdditionalFilterChange}
            />
          </Box>
        </Grid>

        {/* Main Content (77.6% width) */}
        <Grid item xs={9.6}>
          <SearchResults 
            data={filteredResults} 
            filters={selectedFilters}
          />
        </Grid>
      </Grid>
    </Box>
  );
};

export default App;
