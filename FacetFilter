{
  "jobCounts": {
    "CEDAR": { "successes": 102, "failures": 2 },
    "LCD_MART": { "successes": 305, "failures": 3 },
    "CASPIAN": { "successes": 256, "failures": 4 }
  },
  "jobs": [
    {
      "name": "li-grc-dw-ap-assoc-eti-a-dly",
      "status": "Completed"
    },
    {
      "name": "li-grc-dw-ap-assoc-eti-b-dly",
      "status": "Completed"
    },
    {
      "name": "li-grc-dw-ap-assoc-eti-c-dly",
      "status": "Completed"
    },
    {
      "name": "li-grc-dw-ap-assoc-eti-d-dly",
      "status": "Completed"
    },
    {
      "name": "li-grc-dw-ap-assoc-eti-dly",
      "status": "Failed"
    }
  ],
  "jobHistory": [
    {
      "date": "20-Apr",
      "job": "li-grc-dw-ap-assoc-eti-dly",
      "time": "6:04 AM",
      "status": "Completed"
    },
    {
      "date": "21-Apr",
      "job": "li-grc-dw-ap-assoc-eti-dly",
      "time": "6:04 AM",
      "status": "Completed"
    },
    {
      "date": "22-Apr",
      "job": "li-grc-dw-ap-assoc-eti-dly",
      "time": "6:14 AM",
      "status": "Completed"
    },
    {
      "date": "23-Apr",
      "job": "li-grc-dw-ap-assoc-eti-dly",
      "time": "6:00 AM",
      "status": "Completed"
    },
    {
      "date": "24-Apr",
      "job": "li-grc-dw-ap-assoc-eti-dly",
      "time": "6:00 AM",
      "status": "Failed"
    }
  ]
}

import React, { useState } from 'react';
import { Grid, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, Card, CardContent, List, ListItem, ListItemText } from '@mui/material';
import dummyData from './dummy.json';

const JobDashboard = () => {
  const [selectedStatus, setSelectedStatus] = useState(null);
  const [selectedJob, setSelectedJob] = useState(null);

  const handleStatusClick = (status) => {
    setSelectedStatus(status);
    setSelectedJob(null);
  };

  const handleJobClick = (jobName) => {
    setSelectedJob(jobName);
  };

  // Updated filtering logic
  const filteredJobs = dummyData.jobs.filter(job => 
    selectedStatus ? job.status === selectedStatus : false
  );

  const jobHistory = dummyData.jobHistory.filter(history => 
    selectedJob ? history.job === selectedJob : false
  );

  return (
    <Grid container spacing={2} sx={{ p: 2 }}>
      {/* Left Side */}
      <Grid item xs={6}>
        <Typography variant="h6" gutterBottom>Job counts by Application</Typography>
        <TableContainer component={Paper}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>Application</TableCell>
                <TableCell>Successes</TableCell>
                <TableCell>Failures</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {Object.entries(dummyData.jobCounts).map(([app, counts]) => (
                <TableRow key={app}>
                  <TableCell>{app}</TableCell>
                  <TableCell>
                    <span 
                      style={{ cursor: 'pointer', textDecoration: 'underline' }}
                      onClick={() => handleStatusClick('Completed')}
                    >
                      {counts.successes}
                    </span>
                  </TableCell>
                  <TableCell>
                    <span 
                      style={{ cursor: 'pointer', textDecoration: 'underline' }}
                      onClick={() => handleStatusClick('Failed')}
                    >
                      {counts.failures}
                    </span>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      </Grid>

      {/* Right Side */}
      <Grid item xs={6}>
        {selectedStatus && (
          <Card sx={{ mb: 2, elevation: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                {selectedStatus} Jobs
              </Typography>
              <List>
                {filteredJobs.map(job => (
                  <ListItem 
                    key={job.name}
                    button 
                    onClick={() => job.status === 'Failed' && handleJobClick(job.name)}
                    sx={{ 
                      backgroundColor: job.status === 'Failed' ? '#ffeeee' : 'inherit',
                      cursor: job.status === 'Failed' ? 'pointer' : 'default'
                    }}
                  >
                    <ListItemText
                      primary={job.name}
                      secondary={`Status: ${job.status}`}
                    />
                  </ListItem>
                ))}
              </List>
            </CardContent>
          </Card>
        )}

        {selectedJob && (
          <Card sx={{ elevation: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                Job Run History - {selectedJob}
              </Typography>
              <List>
                {jobHistory.map((history, index) => (
                  <ListItem key={index}>
                    <ListItemText
                      primary={`${history.date} - ${history.time}`}
                      secondary={`Status: ${history.status}`}
                    />
                  </ListItem>
                ))}
              </List>
            </CardContent>
          </Card>
        )}
      </Grid>
    </Grid>
  );
};

export default JobDashboard;
