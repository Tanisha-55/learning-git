const [selectedHistory, setSelectedHistory] = useState(null);

 {/* Job History Card */}
  {selectedJob && (
    <Card sx={{ boxShadow: 3, mt: 2 }}>
      <CardContent>
        <Typography variant="h6" gutterBottom sx={{ 
          color: '#187ABA',
          fontWeight: 'bold',
          mb: 2,
          padding: '8px',
          borderBottom: '2px solid #187ABA'
        }}>
          Job Run History - {selectedJob}
        </Typography>
        
        {/* Dialog for Job Details */}
        <Dialog open={!!selectedHistory} onClose={() => setSelectedHistory(null)}>
          <DialogTitle>Job Execution Details</DialogTitle>
          <DialogContent>
            {selectedHistory && (
              <List>
                <ListItem>
                  <ListItemText primary="Job Name" secondary={selectedHistory.jobName} />
                </ListItem>
                <ListItem>
                  <ListItemText primary="Date" secondary={selectedHistory.date} />
                </ListItem>
                <ListItem>
                  <ListItemText primary="Duration" secondary={selectedHistory.duration} />
                </ListItem>
                <ListItem>
                  <ListItemText primary="Initiated By" secondary={selectedHistory.initiatedBy} />
                </ListItem>
                <ListItem>
                  <ListItemText 
                    primary="Error Message" 
                    secondary={selectedHistory.errorMessage || 'N/A'} 
                    sx={{ color: '#c62828' }}
                  />
                </ListItem>
                <ListItem>
                  <ListItemText primary="Details" secondary={selectedHistory.details} />
                </ListItem>
              </List>
            )}
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setSelectedHistory(null)}>Close</Button>
          </DialogActions>
        </Dialog>

        <TableContainer component={Paper}>
          <Table size="small">
            <TableHead>
              <TableRow>
                <TableCell sx={{ backgroundColor: '#187ABA', color: 'white' }}>Job Name</TableCell>
                <TableCell sx={{ backgroundColor: '#187ABA', color: 'white' }}>Date</TableCell>
                <TableCell sx={{ backgroundColor: '#187ABA', color: 'white' }}>Time</TableCell>
                <TableCell sx={{ backgroundColor: '#187ABA', color: 'white' }}>Status</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {jobHistory.map((history, index) => {
                const isFailed = history.status === 'Failed';
                return (
                  <TableRow key={index} hover>
                    <TableCell>
                      <Typography 
                        sx={{ 
                          color: '#1976d2',
                          textDecoration: 'underline',
                          cursor: 'pointer',
                          '&:hover': { textDecoration: 'none' }
                        }}
                        onClick={() => setSelectedHistory(history)}
                      >
                        {history.jobName}
                      </Typography>
                    </TableCell>
                    <TableCell>{history.date}</TableCell>
                    <TableCell>{history.time}</TableCell>
                    <TableCell>
                      <Typography 
                        sx={{ 
                          color: isFailed ? '#c62828' : '#2e7d32',
                          fontWeight: 'bold'
                        }}
                      >
                        {history.status}
                      </Typography>
                    </TableCell>
                  </TableRow>
                )}
              )}
            </TableBody>
          </Table>
        </TableContainer>
      </CardContent>
    </Card>
  )}



{/* Right Side */}
<Grid item xs={6}>
  {selectedPlatform && selectedStatus && (
    <Card sx={{ mb: 2, boxShadow: 3 }}>
      <CardContent>
        <Typography variant="h6" gutterBottom sx={{ 
          color: '#187ABA',
          fontWeight: 'bold',
          mb: 2,
          padding: '8px',
          borderBottom: '2px solid #187ABA'
        }}>
          {selectedPlatform} - {selectedStatus.charAt(0).toUpperCase() + selectedStatus.slice(1)} Jobs
        </Typography>

        <TableContainer component={Paper} sx={{ maxHeight: 400 }}>
          <Table stickyHeader size="small">
            <TableHead>
              <TableRow>
                <TableCell sx={{ 
                  backgroundColor: '#187ABA', 
                  color: 'white', 
                  fontWeight: 'bold' 
                }}>
                  Job Name
                </TableCell>
                <TableCell sx={{ 
                  backgroundColor: '#187ABA', 
                  color: 'white', 
                  fontWeight: 'bold' 
                }}>
                  Status
                </TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {filteredJobs.map((job) => (
                <TableRow 
                  key={job}
                  hover
                  onClick={() => selectedStatus === 'failed' && handleJobClick(job)}
                  sx={{ 
                    cursor: selectedStatus === 'failed' ? 'pointer' : 'default',
                    backgroundColor: selectedStatus === 'failed' ? '#ffebee' : '#e8f5e9'
                  }}
                >
                  <TableCell sx={{ fontWeight: 'medium' }}>
                    {job}
                  </TableCell>
                  <TableCell>
                    <Typography 
                      variant="body2" 
                      sx={{ 
                        color: selectedStatus === 'failed' ? '#c62828' : '#2e7d32',
                        fontWeight: 'bold'
                      }}
                    >
                      {selectedStatus.charAt(0).toUpperCase() + selectedStatus.slice(1)}
                    </Typography>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      </CardContent>
    </Card>
  )}

  {/* Job History Card */}
  {selectedJob && (
    <Card sx={{ boxShadow: 3, mt: 2 }}>
      <CardContent>
        <Typography variant="h6" gutterBottom sx={{ 
          color: '#187ABA',
          fontWeight: 'bold',
          mb: 2,
          padding: '8px',
          borderBottom: '2px solid #187ABA'
        }}>
          Job Run History - {selectedJob}
        </Typography>
        <TableContainer component={Paper}>
          <Table size="small">
            <TableHead>
              <TableRow>
                <TableCell sx={{ backgroundColor: '#187ABA', color: 'white' }}>Date</TableCell>
                <TableCell sx={{ backgroundColor: '#187ABA', color: 'white' }}>Time</TableCell>
                <TableCell sx={{ backgroundColor: '#187ABA', color: 'white' }}>Status</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {jobHistory.map((history, index) => (
                <TableRow key={index}>
                  <TableCell>{history.date}</TableCell>
                  <TableCell>{history.time}</TableCell>
                  <TableCell>
                    <Typography 
                      sx={{ 
                        color: history.status === 'Failed' ? '#c62828' : '#2e7d32',
                        fontWeight: 'bold'
                      }}
                    >
                      {history.status}
                    </Typography>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      </CardContent>
    </Card>
  )}
</Grid>







{/* Right Side */}
<Grid item xs={6}>
  {selectedPlatform && selectedStatus && (
    <Card sx={{ mb: 2, boxShadow: 3 }}>
      <CardContent>
        <Typography variant="h6" gutterBottom sx={{ 
          color: '#187ABA',
          fontWeight: 'bold',
          mb: 2,
          padding: '8px',
          borderBottom: '2px solid #187ABA'
        }}>
          {selectedPlatform} - {selectedStatus.charAt(0).toUpperCase() + selectedStatus.slice(1)} Jobs
        </Typography>

        <Grid container spacing={2}>
          {filteredJobs.map((job) => (
            <Grid item xs={12} sm={6} md={4} key={job}>
              <Paper 
                elevation={2}
                onClick={() => selectedStatus === 'failed' && handleJobClick(job)}
                sx={{
                  p: 1.5,
                  cursor: selectedStatus === 'failed' ? 'pointer' : 'default',
                  backgroundColor: selectedStatus === 'failed' ? '#ffebee' : '#e8f5e9',
                  '&:hover': {
                    backgroundColor: selectedStatus === 'failed' ? '#ffcdd2' : '#c8e6c9'
                  }
                }}
              >
                <Typography variant="body1" sx={{ 
                  fontWeight: 'medium',
                  color: selectedStatus === 'failed' ? '#c62828' : '#2e7d32'
                }}>
                  {job}
                </Typography>
                <Typography variant="caption" sx={{ 
                  color: selectedStatus === 'failed' ? '#c62828' : '#2e7d32'
                }}>
                  Status: {selectedStatus}
                </Typography>
              </Paper>
            </Grid>
          ))}
        </Grid>
      </CardContent>
    </Card>
  )}

  {/* Job History Card (Remains below) */}
  {selectedJob && (
    <Card sx={{ boxShadow: 3, mt: 2 }}>
      <CardContent>
        <Typography variant="h6" gutterBottom sx={{ 
          color: '#187ABA',
          fontWeight: 'bold',
          mb: 2,
          padding: '8px',
          borderBottom: '2px solid #187ABA'
        }}>
          Job Run History - {selectedJob}
        </Typography>
        <List>
          {jobHistory.map((history, index) => (
            <ListItem key={index} sx={{ py: 1 }}>
              <ListItemText
                primary={`${history.date} - ${history.time}`}
                secondary={`Status: ${history.status}`}
                sx={{
                  '& .MuiListItemText-primary': { fontWeight: 'medium' },
                  '& .MuiListItemText-secondary': { 
                    color: history.status === 'Failed' ? '#c62828' : '#2e7d32'
                  }
                }}
              />
            </ListItem>
          ))}
        </List>
      </CardContent>
    </Card>
  )}
</Grid>



import React, { useState } from 'react';
import { 
  Grid, Paper, Table, TableBody, TableCell, TableContainer, 
  TableHead, TableRow, Typography, Card, CardContent, List, 
  ListItem, ListItemText, Box 
} from '@mui/material';
import dummyData from './dummy.json';

const JobDashboard = () => {
  const [selectedPlatform, setSelectedPlatform] = useState(null);
  const [selectedStatus, setSelectedStatus] = useState(null);
  const [selectedJob, setSelectedJob] = useState(null);

  const handleCountClick = (platform, status) => {
    setSelectedPlatform(platform);
    setSelectedStatus(status);
    setSelectedJob(null);
  };

  const handleJobClick = (jobName) => {
    setSelectedJob(jobName);
  };

  const filteredJobs = selectedPlatform && selectedStatus 
    ? dummyData.jobCounts[selectedPlatform][selectedStatus.toLowerCase()].jobs
    : [];

  const jobHistory = dummyData.jobHistory.filter(history => 
    selectedJob ? history.job === selectedJob : false
  );



<Card elevation={3} sx={{ borderRadius: 2 }}>
          <CardContent>
            <Typography variant="h6" gutterBottom sx={{ 
              color: '#187ABA', 
              fontWeight: 'bold',
              mb: 2,
              padding: '8px',
              borderBottom: '2px solid #187ABA'
            }}>
              Job counts by Application
            </Typography>
            
            <TableContainer component={Paper} sx={{ boxShadow: 'none' }}>
              <Table>
                <TableHead>
                  <TableRow sx={{ backgroundColor: '#187ABA' }}>
                    <TableCell sx={{ color: 'white', fontWeight: 'bold' }}>Application</TableCell>
                    <TableCell sx={{ color: 'white', fontWeight: 'bold' }}>Successes</TableCell>
                    <TableCell sx={{ color: 'white', fontWeight: 'bold' }}>Failures</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {Object.entries(dummyData.jobCounts).map(([platform, counts]) => (
                    <TableRow key={platform} hover>
                      <TableCell sx={{ fontWeight: 'medium' }}>{platform}</TableCell>
                      
                      {/* Success Cell */}
                      <TableCell sx={{ 
                        backgroundColor: '#e8f5e9',  // Light green background
                        '&:hover': { backgroundColor: '#c8e6c9' }
                      }}>
                        <Box
                          onClick={() => handleCountClick(platform, 'success')}
                          sx={{
                            cursor: 'pointer',
                            color: '#2e7d32',  // Dark green text
                            fontWeight: 'bold',
                            '&:hover': { textDecoration: 'underline' }
                          }}
                        >
                          {counts.success.count}
                        </Box>
                      </TableCell>
                      
                      {/* Failure Cell */}
                      <TableCell sx={{ 
                        backgroundColor: '#ffebee',  // Light red background
                        '&:hover': { backgroundColor: '#ffcdd2' }
                      }}>
                        <Box
                          onClick={() => handleCountClick(platform, 'failed')}
                          sx={{
                            cursor: 'pointer',
                            color: '#c62828',  // Dark red text
                            fontWeight: 'bold',
                            '&:hover': { textDecoration: 'underline' }
                          }}
                        >
                          {counts.failed.count}
                        </Box>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </CardContent>
        </Card>
      </Grid>




{
  "jobCounts": {
    "CEDAR": { "successes": 102, "failures": 2 },
    "LCD_MART": { "successes": 305, "failures": 3 },
    "CASPIAN": { "successes": 256, "failures": 4 }
  },
  "jobs": [
    {
      "name": "li-grc-dw-ap-assoc-eti-a-dly",
      "status": "Completed"
    },
    {
      "name": "li-grc-dw-ap-assoc-eti-b-dly",
      "status": "Completed"
    },
    {
      "name": "li-grc-dw-ap-assoc-eti-c-dly",
      "status": "Completed"
    },
    {
      "name": "li-grc-dw-ap-assoc-eti-d-dly",
      "status": "Completed"
    },
    {
      "name": "li-grc-dw-ap-assoc-eti-dly",
      "status": "Failed"
    }
  ],
  "jobHistory": [
    {
      "date": "20-Apr",
      "job": "li-grc-dw-ap-assoc-eti-dly",
      "time": "6:04 AM",
      "status": "Completed"
    },
    {
      "date": "21-Apr",
      "job": "li-grc-dw-ap-assoc-eti-dly",
      "time": "6:04 AM",
      "status": "Completed"
    },
    {
      "date": "22-Apr",
      "job": "li-grc-dw-ap-assoc-eti-dly",
      "time": "6:14 AM",
      "status": "Completed"
    },
    {
      "date": "23-Apr",
      "job": "li-grc-dw-ap-assoc-eti-dly",
      "time": "6:00 AM",
      "status": "Completed"
    },
    {
      "date": "24-Apr",
      "job": "li-grc-dw-ap-assoc-eti-dly",
      "time": "6:00 AM",
      "status": "Failed"
    }
  ]
}

import React, { useState } from 'react';
import { Grid, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, Card, CardContent, List, ListItem, ListItemText } from '@mui/material';
import dummyData from './dummy.json';

const JobDashboard = () => {
  const [selectedStatus, setSelectedStatus] = useState(null);
  const [selectedJob, setSelectedJob] = useState(null);

  const handleStatusClick = (status) => {
    setSelectedStatus(status);
    setSelectedJob(null);
  };

  const handleJobClick = (jobName) => {
    setSelectedJob(jobName);
  };

  // Updated filtering logic
  const filteredJobs = dummyData.jobs.filter(job => 
    selectedStatus ? job.status === selectedStatus : false
  );

  const jobHistory = dummyData.jobHistory.filter(history => 
    selectedJob ? history.job === selectedJob : false
  );

  return (
    <Grid container spacing={2} sx={{ p: 2 }}>
      {/* Left Side */}
      <Grid item xs={6}>
        <Typography variant="h6" gutterBottom>Job counts by Application</Typography>
        <TableContainer component={Paper}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>Application</TableCell>
                <TableCell>Successes</TableCell>
                <TableCell>Failures</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {Object.entries(dummyData.jobCounts).map(([app, counts]) => (
                <TableRow key={app}>
                  <TableCell>{app}</TableCell>
                  <TableCell>
                    <span 
                      style={{ cursor: 'pointer', textDecoration: 'underline' }}
                      onClick={() => handleStatusClick('Completed')}
                    >
                      {counts.successes}
                    </span>
                  </TableCell>
                  <TableCell>
                    <span 
                      style={{ cursor: 'pointer', textDecoration: 'underline' }}
                      onClick={() => handleStatusClick('Failed')}
                    >
                      {counts.failures}
                    </span>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      </Grid>

      {/* Right Side */}
      <Grid item xs={6}>
        {selectedStatus && (
          <Card sx={{ mb: 2, elevation: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                {selectedStatus} Jobs
              </Typography>
              <List>
                {filteredJobs.map(job => (
                  <ListItem 
                    key={job.name}
                    button 
                    onClick={() => job.status === 'Failed' && handleJobClick(job.name)}
                    sx={{ 
                      backgroundColor: job.status === 'Failed' ? '#ffeeee' : 'inherit',
                      cursor: job.status === 'Failed' ? 'pointer' : 'default'
                    }}
                  >
                    <ListItemText
                      primary={job.name}
                      secondary={`Status: ${job.status}`}
                    />
                  </ListItem>
                ))}
              </List>
            </CardContent>
          </Card>
        )}

        {selectedJob && (
          <Card sx={{ elevation: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                Job Run History - {selectedJob}
              </Typography>
              <List>
                {jobHistory.map((history, index) => (
                  <ListItem key={index}>
                    <ListItemText
                      primary={`${history.date} - ${history.time}`}
                      secondary={`Status: ${history.status}`}
                    />
                  </ListItem>
                ))}
              </List>
            </CardContent>
          </Card>
        )}
      </Grid>
    </Grid>
  );
};

export default JobDashboard;

{
  "jobCounts": {
    "CEDAR": {
      "success": {
        "count": 205,
        "jobs": [
          "li-grc-etls", "li-grc-gxjsva", "li-grc-dw-ap-assoc-eti-a-dly",
          "li-grc-dw-ap-assoc-eti-b-dly", "li-grc-dw-ap-assoc-eti-c-dly",
          "li-grc-dw-ap-assoc-eti-d-dly", "li-grc-job-001", "li-grc-job-002"
        ]
      },
      "failed": {
        "count": 4,
        "jobs": [
          "li-grc-etls-a", "li-grc-gxjsva-b", 
          "li-grc-dw-ap-assoc-eti-dly", "li-grc-job-failed-001"
        ]
      }
    },
    "LCD_MART": {
      "success": {
        "count": 105,
        "jobs": [
          "li-grc-etlbxs", "li-grc-gxjscdva", "li-grc-mart-job-001",
          "li-grc-mart-job-002", "li-grc-mart-job-003"
        ]
      },
      "failed": {
        "count": 2,
        "jobs": [
          "li-grc-cvj-etls-a", "li-grc-g-m-xjsva-b"
        ]
      }
    },
    "CASPIAN": {
      "success": {
        "count": 256,
        "jobs": [
          "li-grc-casp-job-001", "li-grc-casp-job-002",
          "li-grc-casp-job-003", "li-grc-casp-job-004"
        ]
      },
      "failed": {
        "count": 4,
        "jobs": [
          "li-grc-casp-failed-001", "li-grc-casp-failed-002",
          "li-grc-casp-failed-003", "li-grc-casp-failed-004"
        ]
      }
    }
  },
  "jobHistory": [
    {
      "date": "20-Apr",
      "job": "li-grc-dw-ap-assoc-eti-dly",
      "time": "6:04 AM",
      "status": "Completed"
    },
    {
      "date": "24-Apr",
      "job": "li-grc-dw-ap-assoc-eti-dly",
      "time": "6:00 AM",
      "status": "Failed"
    }
  ]
}


import React, { useState } from 'react';
import { Grid, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography, Card, CardContent, List, ListItem, ListItemText } from '@mui/material';
import dummyData from './dummy.json';

const JobDashboard = () => {
  const [selectedPlatform, setSelectedPlatform] = useState(null);
  const [selectedStatus, setSelectedStatus] = useState(null);
  const [selectedJob, setSelectedJob] = useState(null);

  const handleCountClick = (platform, status) => {
    setSelectedPlatform(platform);
    setSelectedStatus(status);
    setSelectedJob(null);
  };

  const handleJobClick = (jobName) => {
    setSelectedJob(jobName);
  };

  const filteredJobs = selectedPlatform && selectedStatus 
    ? dummyData.jobCounts[selectedPlatform][selectedStatus.toLowerCase()].jobs
    : [];

  const jobHistory = dummyData.jobHistory.filter(history => 
    selectedJob ? history.job === selectedJob : false
  );

  return (
    <Grid container spacing={2} sx={{ p: 2 }}>
      {/* Left Side */}
      <Grid item xs={6}>
        <Typography variant="h6" gutterBottom>Job counts by Application</Typography>
        <TableContainer component={Paper}>
          <Table>
            <TableHead>
              <TableRow>
                <TableCell>Application</TableCell>
                <TableCell>Successes</TableCell>
                <TableCell>Failures</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {Object.entries(dummyData.jobCounts).map(([platform, counts]) => (
                <TableRow key={platform}>
                  <TableCell>{platform}</TableCell>
                  <TableCell>
                    <span 
                      style={{ cursor: 'pointer', textDecoration: 'underline' }}
                      onClick={() => handleCountClick(platform, 'success')}
                    >
                      {counts.success.count}
                    </span>
                  </TableCell>
                  <TableCell>
                    <span 
                      style={{ cursor: 'pointer', textDecoration: 'underline' }}
                      onClick={() => handleCountClick(platform, 'failed')}
                    >
                      {counts.failed.count}
                    </span>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </TableContainer>
      </Grid>

      {/* Right Side */}
      <Grid item xs={6}>
        {selectedPlatform && selectedStatus && (
          <Card sx={{ mb: 2, elevation: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                {selectedPlatform} - {selectedStatus} Jobs
              </Typography>
              <List>
                {filteredJobs.map(job => (
                  <ListItem 
                    key={job}
                    button 
                    onClick={() => selectedStatus === 'failed' && handleJobClick(job)}
                    sx={{ 
                      backgroundColor: selectedStatus === 'failed' ? '#ffeeee' : 'inherit',
                      cursor: selectedStatus === 'failed' ? 'pointer' : 'default'
                    }}
                  >
                    <ListItemText
                      primary={job}
                      secondary={`Status: ${selectedStatus}`}
                    />
                  </ListItem>
                ))}
              </List>
            </CardContent>
          </Card>
        )}

        {selectedJob && (
          <Card sx={{ elevation: 3 }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                Job Run History - {selectedJob}
              </Typography>
              <List>
                {jobHistory.map((history, index) => (
                  <ListItem key={index}>
                    <ListItemText
                      primary={`${history.date} - ${history.time}`}
                      secondary={`Status: ${history.status}`}
                    />
                  </ListItem>
                ))}
              </List>
            </CardContent>
          </Card>
        )}
      </Grid>
    </Grid>
  );
};

export default JobDashboard;
