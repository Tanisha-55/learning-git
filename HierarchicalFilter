import React, { useState, useMemo } from 'react';
import { RichTreeView } from '@mui/x-tree-view/RichTreeView';
import { Box, Typography, Button } from '@mui/material';

const HierarchicalFilter = ({ facetData = {} }) => {
  const [selectedItems, setSelectedItems] = useState([]);
  
  // Enable full selection propagation (both parents and descendants)
  const selectionPropagation = {
    parents: true,
    descendants: true
  };

  // Convert the facetData object to the required tree structure
  const treeData = useMemo(() => {
    const convertToTree = (data, parentPath = '') => {
      if (!data || typeof data !== 'object') {
        return [];
      }

      return Object.entries(data).map(([key, value]) => {
        if (!value || typeof value !== 'object' || value.count === undefined) {
          return null;
        }

        const nodeId = parentPath ? `${parentPath}|${key}` : key;
        const label = `${key} (${value.count})`;
        
        let children = [];
        const nestedProperty = value.assetNames || value.dbNames || value.rsrcNames || null;
        
        if (nestedProperty) {
          children = convertToTree(nestedProperty, nodeId);
        }
        
        return {
          id: nodeId,
          label,
          children: children.length > 0 ? children : undefined,
        };
      }).filter(Boolean);
    };

    return convertToTree(facetData);
  }, [facetData]);

  const handleSelectionChange = (event, itemIds) => {
    setSelectedItems(itemIds);
  };

  const handleClearAll = () => {
    setSelectedItems([]);
  };

  // Get default expanded items (first level items)
  const defaultExpandedItems = useMemo(() => {
    return treeData.length > 0 ? [treeData[0].id] : [];
  }, [treeData]);

  return (
    <Box sx={{ minWidth: 300, maxWidth: 500 }}>
      <Box 
        sx={{ 
          display: 'flex', 
          justifyContent: 'space-between', 
          alignItems: 'center',
          mb: 2
        }}
      >
        <Typography variant="h6">EATER TYPE</Typography>
        <Button 
          variant="text" 
          onClick={handleClearAll}
          sx={{ textTransform: 'none' }}
        >
          CLEAR ALL
        </Button>
      </Box>
      
      {treeData.length > 0 ? (
        <RichTreeView
          items={treeData}
          selectedItems={selectedItems}
          onSelectedItemsChange={handleSelectionChange}
          multiSelect
          selectionPropagation={selectionPropagation}
          defaultExpandedItems={defaultExpandedItems}
          checkboxSelection
          sx={{
            '& .MuiTreeItem-label': {
              fontSize: '0.875rem',
            },
            '& .MuiTreeItem-root': {
              marginBottom: '4px',
            },
          }}
        />
      ) : (
        <Typography variant="body2" color="text.secondary">
          No data available
        </Typography>
      )}
    </Box>
  );
};

export default HierarchicalFilter;
